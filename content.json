{"meta":{"title":"初白的个人博客","subtitle":"在暴雨中行走，伞是倒划天空的船","description":"技术、生活、分享的个人博客，记录生活","author":"初白","url":"https://chubaiwarmlight.github.io/ChuBaiWarmlight","root":"/ChuBaiWarmlight/"},"pages":[{"title":"","date":"2024-09-18T02:37:09.082Z","updated":"2024-09-18T02:37:09.082Z","comments":true,"path":"404.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于我","date":"2024-09-17T00:27:00.000Z","updated":"2024-09-18T02:37:09.083Z","comments":true,"path":"about/index.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/about/index.html","excerpt":"","text":"个人介绍一下，我是初白，一名前端开发者，热爱前端，这个博客只想记录一下生活，记录一下学习，仅此而已，如果有建议也可以欢迎评论！ 以及我想在下面写一首诗，写我未来的人生，这首诗还未完待续，完成时间，应该是我死亡的前一刻！ 诗歌：微风拂面，带来少年的思绪与烦恼拨动心弦，带来少年的惆怅与那丝琴弦，少年只是，愿所爱之人，平平安安，健健康康，即可自己并无所谓，愿父母平安，这简朴的愿望少年即将远行，去看看这个世界，却被枷锁上身，少年不知这是枷锁还是责任烦恼的风终究到来，少年站在路口，不知该前往何方，最终少年踏上旅程，寻找自己。少年面对世界，发现世界残酷，困住自由，少年不在是少年，而是青年，青年所想不明白，为何一年多从不断开的联系，为何中途断开，不知可能是她开始厌倦，开始有新的生活，诗不只是诗，是生活的记载。","author":"初白"},{"title":"","date":"2024-09-09T06:47:17.209Z","updated":"2024-09-09T06:47:17.209Z","comments":true,"path":"css/index.css","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/css/index.css","excerpt":"","text":"footer .aplayer-container{ display: none; }"},{"title":"","date":"2024-09-18T02:37:09.373Z","updated":"2024-09-18T02:37:09.373Z","comments":true,"path":"mylist/index.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/mylist/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2024-09-18T02:37:09.084Z","updated":"2024-09-18T02:37:09.084Z","comments":true,"path":"categories/index.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-09-09T03:22:05.629Z","updated":"2024-09-09T03:22:05.629Z","comments":true,"path":"tags/index.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/index.html","excerpt":"","text":""},{"title":"照片墙","date":"2024-09-18T02:37:09.388Z","updated":"2024-09-18T02:37:09.388Z","comments":true,"path":"photo/index.html","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/photo/index.html","excerpt":"","text":""}],"posts":[{"title":"SEO","slug":"HTML/SEO","date":"2024-09-09T05:35:00.000Z","updated":"2024-09-09T05:42:13.298Z","comments":true,"path":"2024/09/09/HTML/SEO/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2024/09/09/HTML/SEO/","excerpt":"","text":"经典真题 请描述下 SEO 中的 TDK？ 什么是 SEO？（搜索引擎优化）SEO 由英文 Search Engine Optimization 缩写而来，中文意译为“搜索引擎优化”。 其实叫做针对搜索引擎优化更容易理解。它是指从自然搜索结果获得网站流量的技术和过程，是在了解搜索引擎自然排名机制的基础上，对网站进行内部及外部的调整优化，改进网站在搜索引擎中的关键词自然排名，获得更多流量，从而达成网站销售及品牌建设的目标。 如何进行 SEO 优化工作？有的同学第一反应：给钱。 虽然，国内的百度搜索引擎，确实存在给钱就把你排在前面的情况，但是在不给钱的情况下，我们也能够通过一些优化手段来提升页面的权重，从而使我们的页面获取更多流量。 下面就介绍一些常见的 SEO 优化手段。 整个 SEO 工作大致可以分为内部优化和外部优化。 内部优化1. 合理的 title、description、keywords这个就是上面经典面试题中出现的 TDK，其实就是这 3 个单词的缩写。 title：浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到，搜索引擎在抓取网页时，最先读取的就是网页标题，所以 title 是否正确设置极其重要。title 一般不超过 80 个字符，而且词语间要用英文 “-” 隔开，因为计算机只对英语的敏感性较高，对汉语的敏感性不高。 description：也就是网页的内容摘要，这是对于一个网页的简要内容概况。description 一般不超过 150 个字符，描述内容要和页面内容相关。 keywords：主要作用是告诉搜索引擎本页内容是围绕哪些词展开的。因此 keywords 的每个词都要能在内容中找到相应匹配，才有利于排名。keywords 一般不超过 3 个，每个关键词不宜过长，而且词语间要用英文 “,” 隔开，尽量将重要的关键字靠前放。 2. 语义化的 HTML 代码，符合 W3C 规范语义化代码能够让搜索引擎容易理解网页，即使脱去了 CSS 这一层外衣，整个网页的结构也是清清楚楚的，无论是搜索引擎还是阅读者，都能够很容易的分辨网页的结构。 关于语义化的具体内容，可以参阅《语义化》章节。 3. 非装饰性图片必须加 altimg 标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。 例如：&lt;img src=&quot;/xxx.jpg&quot; alt=&quot;海尔官网-双门冰箱&quot; /&gt; alt 标签的作用： 增强内容相关性：它是可以利用汉字介绍文章内容的，对于一些特定的企业产品，由于视觉的体验，它往往是少文字的。 提高关键词密度：在操作企业站的时候，我们经常遇到是站点首屏一个大的横幅 banner，几乎占用了首页的大部分页面，为了有效的提高首页核心关键词密度，我们只能利用一切办法增添关键词，比如：在图片的 alt 标签中添加。 4. 对于不显示的对象谨慎使用 display:none对于不想显示的文字内容，应当设置 z-index 或设置到浏览器显示器之外。因为搜索引擎会过滤掉 display:none 其中的内容。 5. 重要内容 HTML 代码放在最前索引擎抓取 HTML 顺序是从上到下，所以我们尽量将重要的内容放在前面，保证重要内容一定会被抓取。 6. 少用 iframe少用或者尽量不用 iframe，因为搜索引擎不会抓取 iframe 中的内容 优化的细节还有很多，更多细节可以参阅这篇博文：https://blog.csdn.net/yanyihan16/article/details/89209436?utm_medium&#x3D;distribute.pc_relevant.none-task-blog-2defaultCTRLISTdefault-1.control&amp;depth_1-utm_source&#x3D;distribute.pc_relevant.none-task-blog-2defaultCTRLISTdefault-1.control 外部优化外部优化主要是指放友情链接和外链。好的友情链接可以快速的提高网站的权重，高质量的外链，会给你的网站提高源源不断的权重提升。另外，就是要向各大搜索引擎登陆入口提交尚未收录站点。 真题解答 请描述下 SEO 中的 TDK？ 在 SEO 中，所谓的 TDK 其实就是 title、description、keywords。 title：浏览器上显示的那些内容，不仅用户能看到，也能被搜索引擎检索到，搜索引擎在抓取网页时，最先读取的就是网页标题，所以 title 是否正确设置极其重要。title 一般不超过 80 个字符，而且词语间要用英文 “-” 隔开，因为计算机只对英语的敏感性较高，对汉语的敏感性不高。 description：也就是网页的内容摘要，这是对于一个网页的简要内容概况。description 一般不超过 150 个字符，描述内容要和页面内容相关。 keywords：主要作用是告诉搜索引擎本页内容是围绕哪些词展开的。因此 keywords 的每个词都要能在内容中找到相应匹配，才有利于排名。keywords 一般不超过 3 个，每个关键词不宜过长，而且词语间要用英文 “,” 隔开，尽量将重要的关键字靠前放。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"W3C","slug":"HTML/w3c","date":"2024-09-09T05:35:00.000Z","updated":"2024-09-09T05:35:52.957Z","comments":true,"path":"2024/09/09/HTML/w3c/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2024/09/09/HTML/w3c/","excerpt":"","text":"经典真题 对于 WEB 标准以及 W3C 的理解与认识问题 什么是 W3C W3C 指万维网联盟（World Wide Web Consortium） W3C 创建于1994年10月 W3C 由 Tim Berners-Lee 创建 W3C 是一个会员组织 W3C 的工作是对 web 进行标准化 W3C 创建并维护 WWW 标准 W3C 标准被称为 W3C 推荐（W3C 规范） W3C 是如何创建的？万维网（World Wide Web）是作为欧洲核子研究组织的一个项目发展起来的，在那里 Tim Berners-Lee 开发出万维网的雏形。Tim Berners-Lee 是万维网的发明人，目前是万维网联盟的主任。 W3C 在 1994 年被创建，其创立目的是为了完成麻省理工学院（MIT）与欧洲粒子物理研究所（CERN）之间的协同工作，并得到了美国国防部高级研究计划局（DARPA）和欧洲委员会（European Commission）的支持。 标准化 WebW3C 致力于实现所有的用户都能够对 Web 加以利用（不论其文化教育背景、能力、财力以及其身体残疾）。 W3C 同时与其他标准化组织协同工作，比如 Internet 工程工作小组（Internet Engineering Task Force）、无线应用协议（WAP）以及 Unicode 联盟（Unicode Consortium）。 W3C 由美国麻省理工学院计算机科学和人工智能实验室 (MIT CSAIL)，总部位于法国的欧洲信息数学研究联盟(ERCIM) 和日本的庆应大学（Keio University）联合运作，并且在世界范围内拥有分支办事处。 W3C 成员正因为 Web 是如此的重要（不论在其影响范围还是在投资方面），以至于不应由任何一家单独的组织来对它的未来进行控制，因此 W3C 扮演着一个会员组织的角色： 一些知名的会员包括： IBM Microsoft America Online Apple Adobe Macromedia Sun Microsystems W3C 的会员包括了：软件开发商、内容提供商、企业用户、通信公司、研究机构、研究实验室、标准化团体以及政府。 W3C 规范的批准步骤在 W3C 发布某个新标准的过程中，规范是通过下面的严格程序由一个简单的理念逐步确立为推荐标准的： W3C 收到一份提交 由 W3C 发布一份记录 由 W3C 创建一个工作组 由 W3C 发布一份工作草案 由 W3C 发布一份候选的推荐 由 W3C 发布一份被提议的推荐 由 W3C 发布推荐 具体步骤可以参阅：https://www.runoob.com/w3c/w3c-process.html 真题解答 对于 WEB 标准以及 W3C 的理解与认识问题 任何东西都需要一个标准，有了标准才能够更好的进行交流和推广。不同的标准，得出的便是不同的结果。因此，制定什么样的标准，如何确立标准，至关重要。 正因为有了网页的标准，才能降低开发难度及开发成本，减少各种 BUG、安全问题， 提高网站易用性。 就好比 HTML 在 W3C 组织推出标准之前，不同的浏览器厂商有一套自己的标准，这对于开发人员来讲是痛苦的，所以才会遗留下浏览器的标准模式和怪异模式这个历史问题。 W3C 就是一个推出标准的组织，被称之为万维网联盟，W3C 最重要的工作是发展 Web 规范。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"BFC","slug":"CSS/BFC","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-18T02:37:09.083Z","comments":true,"path":"2023/12/25/CSS/BFC/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/CSS/BFC/","excerpt":"","text":"介绍下 BFC 及其应用 介绍下 BFC、IFC、GFC 和 FFC 搞懂各种 FC一看到 BFC、IFC、GFC 和 FFC，大家可能会想到 KFC。 然而这里所说的 xFC 和 KFC 没有任何关系。 那么这些 FC 究竟是啥呢？ 不着急，我们先搞懂一个，后面的陆陆续续也就融会贯通了。 我们首先就来看这个 BFC，英语全称 Block formatting contexts，翻译成中文就是“块级格式化上下文”。 简单来说，就是页面中的一块渲染区域，并且有一套属于自己的渲染规则，它决定了元素如何对齐内容进行布局，以及与其他元素的关系和相互作用。 当涉及到可视化布局的时候，BFC 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。 再简短一点，那就是：BFC** 是一个独立的布局环境，BFC 内部的元素布局与外部互不影响** 这就好比你在你自己家里面，你想怎么摆放你的家具都可以，你家的家具布局并不会影响邻居家的家具布局。 当然，虽然说 BFC 是一个独立的布局环境，里外不影响，但也不是意味着布局没有章法，基本的规矩还是要有的。 例如，BFC 的布局规则有如下几条： 内部的 Box 会在垂直方向一个接着一个地放置。 Box 垂直方向上的距离由 margin 决定。属于同一个 BFC 的两个相邻的 Box 的 margin 会发生重叠。 每个盒子的左外边框紧挨着包含块的左边框，即使浮动元素也是如此。 BFC 的区域不会与浮动 Box 重叠。 BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。 计算 BFC 的高度时，浮动子元素也参与计算。 诶？？ 这好像在我们的 body 元素里面，盒子天然就是这样的布局规则呀？ 没错，实际上在一个标准流中 body 元素就是一个天然的 BFC。 那么如果其他区域，我想单独设置成一个 BFC，该怎么办呢？这里记录了一些常见的方式： 元素或属性 属性值 根元素 **float **left、right **postion **absolute、fixed **overflow **auto、scroll、hidden **display **inline-block、table-cell 上面只记录了一些常见的方式，完整的 BFC 触发方式可以参阅：https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context 那么块级格式化上下文有啥具体的用处呢？我们来看几个场景 解决浮动元素令父元素高度坍塌的问题 123&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 123456789.father&#123; border: 5px solid;&#125;.son&#123; width: 100px; height: 100px; background-color: blue; float: left;&#125; 在上面的代码中，父元素的高度是靠子元素撑起来的，但是一旦我们给子元素设置了浮动，那么父元素的高度就塌陷了。如下： 此时我们就可以将父元素设置成一个 BFC，例如： 1234567891011.father&#123; border: 5px solid; overflow: hidden; /* 将父元素设置为一个 BFC */&#125;.son&#123; width: 100px; height: 100px; background-color: blue; float: left;&#125; 效果：可以看到由于父元素变成 BFC，高度并没有产生塌陷了，其原因是在计算 BFC 的高度时，浮动子元素也参与计算 非浮动元素被浮动元素覆盖 12&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; 1234567891011.box1&#123; width: 100px; height: 50px; background-color: red; float: left;&#125;.box2&#123; width: 50px; height: 50px; background-color: blue;&#125; 在上面的代码中，由于 box1 设置了浮动效果，所以会脱离标准流，自然而然 box2 会往上面跑，结果就被高度和自己一样的 box1 给挡住了。 接下来我们设置 box2 为 BFC，如下： 123456789101112.box1&#123; width: 100px; height: 50px; background-color: red; float: left;&#125;.box2&#123; width: 50px; height: 50px; background-color: blue; overflow: hidden;&#125; 效果：由于 BFC 的区域不会与浮动 box 重叠，所以即使 box1 因为浮动脱离了标准流，box2 也不会被 box1 遮挡 基于此特点，我们就可以制作两栏自适应布局，方法就是给固定栏设置固定宽度，给不固定栏开启 BFC。 12&lt;div class=&quot;left&quot;&gt;导航栏&lt;/div&gt;&lt;div class=&quot;right&quot;&gt;这是右侧&lt;/div&gt; 12345678910111213141516*&#123; margin: 0; padding: 0;&#125;.left &#123; width: 200px; height: 100vh; background-color: skyblue; float: left;&#125;.right &#123; width: calc(100% - 200px); height: 100vh; background-color: yellowgreen;&#125; 效果：在上面的代码中，我们要设置两栏布局，左边栏宽度固定，右边栏自适应。结果我们发现右侧出现了空白 究其原因就是右侧区域与浮动盒子重叠了 修改 .right 部分的代码，添加 overflow:hidden 使其成为一个 BFC： 123456.right &#123; width: calc(100% - 200px); height: 100vh; background-color: yellowgreen; overflow: hidden;&#125; 效果：因为 BFC 的区域不会与浮动 Box 重叠，所以右侧空白没有了 外边距垂直方向重合的问题 BFC 还能够解决 margin 折叠的问题，例如： 12&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt; 1234567891011121314151617* &#123; margin: 0; padding: 0;&#125;.box1&#123; width: 100px; height: 100px; background-color: red; margin-bottom: 10px;&#125;.box2&#123; width: 100px; height: 100px; background-color: blue; margin-top: 10px;&#125; 效果： 此时我们可以在 box2 外部再包含一个 div，并且将这个 div 设置为 BFC，如下： 1234&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920* &#123; margin: 0; padding: 0;&#125;.box1&#123; width: 100px; height: 100px; background-color: red; margin-bottom: 10px;&#125;.box2&#123; width: 100px; height: 100px; background-color: blue; margin-top: 10px;&#125;.container&#123; overflow: hidden;&#125; 效果： OK，到这里你应该明白什么是 BFC 以及 BFC 的触发规则和其使用场景了。 明白了 BFC，那么其他的 IFC、GFC 和 FFC 也就大同小异了。 IFC（Inline formatting context）：翻译成中文就是“行内格式化上下文”，也就是一块区域以行内元素的形式来格式化 GFC（GrideLayout formatting contexts）：翻译成中文就是“网格布局格式化上下文”，将一块区域以 grid 网格的形式来格式化 FFC（Flex formatting contexts）：翻译成中文就是“弹性格式化上下文“，将一块区域以弹性盒的形式来格式化 更多关于格式化上下文的内容，可以参阅 MDN：BFC：https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_contextIFC：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Inline_formatting_context 真题解答 介绍下 BFC 及其应用 参考答案：所谓 BFC，指的是一个独立的布局环境，BFC 内部的元素布局与外部互不影响。触发 BFC 的方式有很多，常见的有： 设置浮动 overflow 设置为 auto、scroll、hidden positon 设置为 absolute、fixed 常见的 BFC 应用有： 解决浮动元素令父元素高度坍塌的问题 解决非浮动元素被浮动元素覆盖问题 解决外边距垂直方向重合的问题 介绍下 BFC、IFC、GFC 和 FFC 参考答案： BFC：块级格式上下文，指的是一个独立的布局环境，BFC 内部的元素布局与外部互不影响。 IFC：行内格式化上下文，将一块区域以行内元素的形式来格式化。 GFC：网格布局格式化上下文，将一块区域以 grid 网格的形式来格式化 FFC：弹性格式化上下文，将一块区域以弹性盒的形式来格式化 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/CSS/"}],"author":"初白"},{"title":"CSS单位居中","slug":"CSS/CSS单位居中","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-11T07:29:45.980Z","comments":true,"path":"2023/12/25/CSS/CSS单位居中/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/CSS/CSS%E5%8D%95%E4%BD%8D%E5%B1%85%E4%B8%AD/","excerpt":"","text":"经典真题 px 和 em 的区别 CSS 中的哪些单位首先，在 CSS 中，单位分为两大类，绝对长度单位和相对长度单位。 绝对长度单位我们先来说这个，绝对长度单位最好理解，和我们现实生活中是一样的。在我们现实生活中，常见的长度单位有米（m）、厘米（cm）、毫米（mm），每一种单位的长度都是固定，比如 5cm，你走到任何地方 5cm 的长度都是一致的 例如： 1&lt;div class=&quot;container&quot;&gt;&lt;/div&gt; 12345.container&#123; width: 5cm; height: 5cm; background-color: pink;&#125; 在上面的代码中，我们设置了盒子的宽高都是 5cm，这里用的就是绝对长度单位。 常见的绝对单位长度如下： 这些值中的大多数在用于打印时比用于屏幕输出时更有用。例如，我们通常不会在屏幕上使用 cm。 惟一一个经常使用的值，估计就是 px(像素)。 相对长度单位相对长度单位相对于其他一些东西，比如父元素的字体大小，或者视图端口的大小。使用相对单位的好处是，经过一些仔细的规划，我们可以使文本或其他元素的大小与页面上的其他内容相对应。 下表列出了 web 开发中一些最有用的单位。 上面的单位中，常用的有 em、rem、vw、vh，其中 vw 和 vh 代表的是视口的宽度和高度，例如： 1&lt;div class=&quot;container&quot;&gt;&lt;/div&gt; 123456789*&#123; margin: 0; padding: 0;&#125;.container &#123; width: 50vw; height: 100vh; background-color: pink;&#125; 在上面的代码中，我们设置了容器的宽度为 50vw，也就是占视口的一半，而高度我们设置的是 100vh，就是占满整个视图。 接下来来看一下 em 和 rem。 em 和 rem 相对于 px 更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局。 对于 em 和 rem 的区别一句话概括：em** 相对于父元素，rem 相对于根元素。** 来看关于 em 和 rem 示例。 em 示例 1234567&lt;div&gt; 我是父元素div &lt;p&gt; 我是子元素p &lt;span&gt;我是孙元素span&lt;/span&gt; &lt;/p&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930* &#123; margin: 0; padding: 0;&#125;div &#123; font-size: 40px; width: 10em; /* 400px */ height: 10em; outline: solid 1px black; margin: 10px;&#125;p &#123; font-size: 0.5em; /* 20px */ width: 10em; /* 200px */ height: 10em; outline: solid 1px red;&#125;span &#123; font-size: 0.5em; width: 10em; height: 10em; outline: solid 1px blue; display: block;&#125; 效果： rem 示例 rem 是全部的长度都相对于根元素，根元素是谁？ 那就是 html元素。通常做法是给 html 元素设置一个字体大小，然后其他元素的长度单位就为 rem。 例如： 1234567&lt;div&gt; 我是父元素div &lt;p&gt; 我是子元素p &lt;span&gt;我是孙元素span&lt;/span&gt; &lt;/p&gt;&lt;/div&gt; 12345678910111213141516171819202122232425262728293031323334353637* &#123; margin: 0; padding: 0;&#125;html &#123; font-size: 10px;&#125;div &#123; font-size: 4rem; /* 40px */ width: 30rem; /* 300px */ height: 30rem; /* 300px */ outline: solid 1px black; margin: 10px;&#125;p &#123; font-size: 2rem; /* 20px */ width: 15rem; /* 150px */ height: 15rem; /* 150px */ outline: solid 1px red;&#125;span &#123; font-size: 1.5rem; width: 10rem; height: 10rem; outline: solid 1px blue; display: block;&#125; 所以当用 rem 做响应式时，直接在媒体中改变 html 的 font-size，此时用 rem 作为单位的元素的大小都会相应改变，很方便。 看到这里我想大家都能够更深刻的体会了 em 和 rem 的区别了，其实就是参照物不同。 真题解答 px 和 em 的区别 参考答案： px 即 pixel 像素，是相对于屏幕分辨率而言的，是一个绝对单位，但是具有一定的相对性。因为在同一设备上每个设备像素所代表的物理长度是固定不变的（绝对性），但在不同设备间每个设备像素所代表的物理长度是可以变化的（相对性）。 em 是相对长度单位，具体的大小要相对于父元素来计算，例如父元素的字体大小为 40px，那么子元素 1em 就代表字体大小和父元素一样为 40px，0.5em 就代表字体大小为父元素的一半即 20px。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/CSS/"}],"author":"初白"},{"title":"渐进式渲染","slug":"CSS/渐变式渲染","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-11T07:29:35.729Z","comments":true,"path":"2023/12/25/CSS/渐变式渲染/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/CSS/%E6%B8%90%E5%8F%98%E5%BC%8F%E6%B8%B2%E6%9F%93/","excerpt":"","text":"经典真题 什么是渐进式渲染 ？ 渐进式渲染渐进式渲染，英文全称 progressive rendering，也被称之为惰性渲染，指的是为了提高用户感知的加载速度，以尽快的速度来呈现页面的技术。 在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。 有一点需要弄明白的是，这不是指的某一项技术，而是各种技术的一种集合。 例如： 骨架屏 在加载网络数据时，为了提升用户体验，通常会使用一个转圈圈的 loading 动画，或者使用 Skeleton Screen 占位。相比与 loading 动画，Skeleton Screen 的效果要更生动 图片懒加载 所谓图片懒加载，顾名思义，就是先加载部分图片，剩余的图片等到需要的时候再加载。这在电商网站中尤其常见。 比如一个电商网站，首屏通常会有很多的数据，清晰度较高的 banner 或轮播。页面非首屏部分会员很多商品夹杂着大量的图片。这是时候选择懒加载以保证首屏的流畅十分重要。 图片占位符 在网页加载的时候，某些图片还在请求中或者还未请求，这个时候就先找一个临时代替的图像，放在最终图像的位置上，但是这只是临时替代的图形，当图片数据准备好以后，会重新渲染真正的图形数据。 拆分网页资源 大部分用户不会用到一个网站的所有页面，但我们通常的做法却是把所有的功能都打包进一个很大的文件里面。一个 bundle.js 文件的大小可能会有几 M，一个打包后的 style.css 会包含网站的一切样式，从 CSS 结构定义到网站在各个版本的样式：移动端、平板、桌面、打印版等等。 但用户并不是一开始就需要所有的资源，所有我们可以对资源进行拆分，首先加载那些关键的资源，其他的资源等到需要的时候再去加载它。 更多的关于渐进式渲染的内容，可以参阅 MDN：https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps&#x2F;Loading 真题解答 什么是渐进式渲染 ？ 参考答案： 渐进式渲染，英文全称 progressive rendering，也被称之为惰性渲染，指的是为了提高用户感知的加载速度，以尽快的速度来呈现页面的技术。但是这并不是某一项技术的特指，而是一系列技术的集合。 例如： 骨架屏 图片懒加载 图片占位符 资源拆分 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/CSS/"}],"author":"初白"},{"title":"HTML面试汇总","slug":"HTML/HTML面试汇总","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T05:59:51.333Z","comments":true,"path":"2023/12/25/HTML/HTML面试汇总/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/HTML%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/","excerpt":"","text":"1. 什么是 &lt;!DOCTYPE&gt;？是否需要在 HTML5 中使用？ 参考答案：它是 HTML 的文档声明，通过它告诉浏览器，使用哪一个 HTML 版本标准解析文档。在浏览器发展的历史中，HTML 出现过很多个版本，不同版本在元素、属性等书写格式上略有差异，如果不预先告诉浏览器，浏览器就不知道我们的文档标准是什么，在这种情况下，大部分浏览器将开启最大兼容模式来解析网页，我们称之为怪异模式。这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的 bug，所以文档声明是必须的。而文档声明有多种书写格式，对应不同的 HTML 版本，&lt;!DOCTYPE&gt; 这种书写是告诉浏览器，整个文档使用 HTML5 的标准进行解析。 2. 什么是可替换元素，什么是非可替换元素，它们各自有什么特点？ 参考答案：可替换元素是指这样一种元素，它在页面中的大部分展现效果不由 CSS 决定。比如 img 元素就是一个可替换元素，它在页面中显示出的效果主要取决于你连接的是什么图片，图片是什么它就展示什么，CSS 虽然可以控制图片的尺寸位置，但永远无法控制图片本身。再比如，select 元素也是一个典型的可替换元素，它在页面上呈现的是用户操作系统上的下拉列表样式，因此，它的展现效果是由操作系统决定的。所以，同一个 select 元素，放到不同操作系统的电脑上会呈现不同的外观。img、video、audio、大部分表单元素都属于可替换元素。非可替换元素就是指的普通元素，它具体在页面上呈现什么，完全由 CSS 来决定。 3. src 和 href 的区别（京东） 参考答案：它们都是 HTML 中特定元素的属性。src 是 source 的缩写，它通常用于 img、video、audio、script 元素，通过 src 属性，可以指定外部资源的来源地址。href 是 hyper reference 的缩写，意味「超引用」，它通常用于 a、link 元素，通过 href 属性，可以标识文档中引用的其他超文本。 4. 说说常用的 meta 标签 参考答案：meta 标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。常用的 meta 标签的属性有： content ，设置或返回 meta 元素的 content 属性的值 。 http-equiv，把 content 属性连接到一个 HTTP 头部。 name，把 content 属性连接到某个名称。 关于 meta 标签，回答出常用的一些属性值即可，不用全部背下来。 具体的关于 meta 标签能够设置的属性，可以参阅：https://www.runoob.com/w3cnote/meta.html 5. 说说对 html 语义化的理解 参考答案： 去掉或者丢失样式的时候能够让页面呈现出清晰的结构 有利于 SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重； 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页； 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化。 HTML5 中新增加的很多标签（如：、、 和 等） 就是基于语义化设计原则）下面就是语义化 html 代码； 1234&lt;div id=&quot;header&quot;&gt; &lt;h1&gt;标题&lt;/h1&gt; &lt;h2&gt;专注Web前端技术&lt;/h2&gt;&lt;/div&gt; 总结一下，总之就是： 用正确的标签做正确的事情！ html 语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析； 在没有样式 CCS 情况下也以一种文档格式显示，并且是容易阅读的。 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。 6. label 的作用是什么？是怎么用的？ 参考答案：label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。 解析：最常用 label 标签的地方，应该就是表单中选择性别的单选框了。例如： 12345678&lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同。&lt;form&gt;&lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot; /&gt; &lt;br /&gt;&lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;female&quot; /&gt;&lt;/form&gt; 上面的代码中，当 label 和表单控件绑定后，用户不用必须点击单选框才能确定自己的选项，点击 label 所包裹的文字也能够自动聚焦绑定的表单控件。 7. iframe 框架有那些优缺点？ 参考答案： iframe 会阻塞主页面的 Onload 事件； iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 使用 iframe 之前需要考虑这两个缺点。如果需要使用 iframe，最好是通过 javascript 动态给 iframe 添加 src 属性值，这样可以可以绕开以上两个问题。 8. HTML 与 XHTML 二者有什么区别，你觉得应该使用哪一个并说出理由。 参考答案：HTML 与 XHTML 之间的差别，主要分为功能上的差别和书写习惯的差别两方面。关于功能上的差别，主要是 XHTML 可兼容各大浏览器、手机以及 PDA，并且浏览器也能快速正确地编译网页。由于 XHTML 的语法较为严谨，所以如果你是习惯松散结构的 HTML 编写者，那需要注意 XHTML 的规则。下面列出了几条容易犯的错误，供理解。 所有标签都必须小写 在 XHTML 中，所有的标签都必须小写，不能大小写穿插其中，也不能全部都是大写。 标签必须成双成对 像是 …、…、…标签等，当出现一个标签时，必须要有对应的结束标签，缺一不可，就像在任何程序语言中的括号一样 标签顺序必须正确 标签由外到内，一层层包覆着，所以假设你先写 div 后写 h1，结尾就要先写 h1 后写 div。只要记住一个原则“先进后出”，先弹出的标签要后结尾。 所有属性都必须使用双引号 在 XHTML 1.0 中规定连单引号也不能使用，所以全程都得用双引号。 不允许使用 target&#x3D;”_blank” 从 XHTML 1.1 开始全面禁止 target 属性，如果想要有开新窗口的功能，就必须改写为 *rel&#x3D;”external”*，并搭配 JavaScript 实现此效果。 9. HTML5 的 form 如何关闭自动完成功能？ 参考答案：HTML 的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了。使用 autocomplete&#x3D;”off”（给不想要提示的 form 或某个 input 设置为 autocomplete&#x3D;off。）很多时候，需要对客户的资料进行保密，防止浏览器软件或者恶意插件获取到；可以在 input 中加入 autocomplete&#x3D;“off” 来关闭记录系统需要保密的情况下可以使用此参数提示：autocomplete 属性有可能在 form 元素中是开启的，而在 input 元素中是关闭的。注意：autocomplete 适用于 标签，以及以下类型的 标签：text, search, url, telephone, email, password, datepickers, range 以及 color。 10. title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？ 参考答案：title 与 h1：h1 标签写在网页的 body 中，title 标签写在网页的 head 中，h1 标签控制一段文字的大小（从 h1~h6），title 是网页标题的意思，如 这是网页标题。b 与 strong 的区别：b 是以前的加粗元素，而新出来的 strong 元素虽然在表现上看上去也是加粗，但是却拥有语义，表示强调某段文字的信息。i 与 em 的区别：同样，i 是 italic（斜体）的简写，是早期的斜体元素，而 em 是 emphasize（强调）的简写，是一个表示强调的元素。后者相比前者拥有语义。经典的总结： title 属性表示网页的标题，h1 元素则表示层次明确的页面内容标题，对页面信息的抓取也有很大的影响 strong 是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：会重读，而 是展示强调内容 i 内容展示为斜体，em 表示强调的文本 除了上面所列举的那几组外，相似的还有如下的元素： 自然样式标签：b、i、u、s、pre 语义样式标签：strong、em、ins、del、code 应该准确使用语义样式标签，但不能滥用，如果不能确定时首选使用自然样式标签。 11. 请描述下 SEO 中的 TDK？ 参考答案：在 SEO 中，所谓的 TDK 其实就是 title、description、keywords 这三个标签，title 标题标签，description 描述标签，keywords 关键词标签。 12. 每个 HTML 文件头里都有个很重要的东西，Doctype，知道这是干什么的么？ 参考答案：&lt;!DOCTYPE&gt; 声明位于文档中的最前面的位置，处于 标签之前，主要作用是告诉浏览器按照何种规范解析网页。 解析：doctype 声明是一种标准通用标记语言的文档类型声明，目的是告诉标准通用标记语言解析器要使用什么样的文档类型定义（DTD）来解析文档。声明是用来指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 声明必须是 HTML 文档的第一行，位于 标签之前。浏览器本身分为两种模式，一种是标准模式，一种是怪异模式，浏览器通过 doctype 来区分这两种模式，doctype 在 html 中的作用就是触发浏览器的标准模式，如果 html 中省略了 doctype，浏览器就会进入到 Quirks 模式（怪异模式）。在这种模式下，有些样式会和标准模式存在差异，而 html 标准和 dom 标准值规定了标准模式下的行为，没有对怪异模式做出规定，因此不同浏览器在怪异模式下的处理也是不同的，所以一定要在 html 开头使用 doctype。 13. 什么是严格模式与混杂模式？ 参考答案： 严格模式：以浏览器支持的最高标准运行 混杂模式：页面以宽松向下兼容的方式显示，模拟老式浏览器的行为 14. 对于 WEB 标准以及 W3C 的理解与认识问题 参考答案：Web** 标准简单来说可以分为结构、表现和行为*。其中结构主要是有 HTML 标签组成。或许通俗点说，在页面 body 里面我们写入的标签都是为了页面的结构。表现即指 css 样式表，通过 css 可以是页面的结构标签更具美感。行为是指页面和用户具有一定的交互，同时页面结构或者表现发生变化，主要是有 js 组成。W3C 是一个定制各种标准的非盈利性组织，标准包括了 HTML、CSS、XHTML 等，web* 标准制定后，有以下几个优点： 学习成本降低，只学习标准即可，否则将学习各个浏览器厂商的标准。 统一开发流程，用标准化工具开发（例如 VSCode、WebStorm、Sublime 等）再用标准化的浏览器测试，便于多人协作。 简化网站代码的维护。 跨平台，可方便迁移到不同设备中 15. 列举 IE 与其他浏览器不一样的特性？ 参考答案： IE 的排版引擎是 Trident （又称为 MSHTML） Trident 内核曾经几乎与 W3C 标准脱节 Trident 内核的大量 Bug 等安全性问题没有得到及时解决 JS 方面，有很多独立的方法，例如绑定事件的 attachEvent、创建事件的 createEventObject 等 CSS 方面，也有自己独有的处理方式，例如设置透明，低版本 IE 中使用滤镜的方式，盒模型也和 W3C 规定的盒模型不同 16. 前端页面有哪三层构成，分别是什么？作用是什么？ 参考答案：分成：结构层、表示层、行为层。 结构层（structural layer） 由 HTML 或 XHTML 之类的标记语言负责创建。标签，也就是那些出现在尖括号里的单词，对网页内容的语义含义做出了描述，但这些标签不包含任何关于如何显示有关内容的信息。例如，p 标签表达了这样一种语义：“这是一个文本段。” 2.表示层（presentation layer） 由 CSS 负责创建。 CSS 对“如何显示有关内容”的问题做出了回答。 行为层（behaviorlayer） 负责回答“内容应该如何对事件做出反应”这一问题。这是 Javascript 语言和 DOM 主宰的领域。 17. 页面可见性（Page Visibility）API 可以有哪些用途？ 参考答案：所谓页面可见性，就是获取当前页面的可见状态。因为对于用户来讲可以打开好多标签页面来回切换，然而始终只有一个页面处于显示状态。所以我们可以通过页面可见性（Page Visibility）API 来判断当前页面是显示状态还是隐藏状态。常用的 API 有三个，document.hidden 返回一个布尔值，如果是 true，表示页面可见，false 则表示页面隐藏。不同页面之间来回切换，会触发 visibilitychange 事件，还有一个 document.visibilityState，表示页面所处的状态。 18. Quirks（怪癖）模式是什么？它和 Standards（标准）模式有什么区别 参考答案：以 IE6 为例，如果写了 DTD，就意味着这个页面将采用对 CSS 支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是 Quirks 模式（怪癖模式，诡异模式，怪异模式）。区别：总体会有布局、样式解析和脚本执行三个方面的区别，这里列举一些比较常见的区别： 盒模型：在 W3C 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在 Quirks 模式下，IE 的宽度和高度还包含了 padding 和 border。 设置行内元素的高宽：在 Standards 模式下，给 等行内元素设置 wdith 和 height 都不会生效，而在 Quirks 模式下，则会生效。 设置百分比的高度：在 Standards 模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的 用 margin:0 auto 设置水平居中：使用 margin:0 auto 在 Standards 模式下可以使元素水平居中，但在 Quirks 模式下却会失效。 19. div+css 的布局较 table 布局有什么优点？ 参考答案： 样式的调整更加方便，内容和样式的分离，使页面和样式的调整变得更加方便。 页面加载速度更快、结构化清晰、页面显示简洁。 表现与结构相分离。 易于优化（SEO）搜索引擎更友好，排名更容易靠前。 符合 W3C 标准。 20. 请谈一下你对网页标准和标准制定机构重要性的理解。 参考答案：任何东西都需要一个标准，有了标准才能够更好的进行交流和推广。不同的标准，得出的便是不同的结果。因此，制定什么样的标准，如何确立标准，至关重要。正因为有了网页的标准，才能降低开发难度及开发成本，减少各种 BUG、安全问题， 提高网站易用性。 21. 知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？ 参考答案：参考答案：所谓微格式，是建立在已有的、被广泛采用的标准基础之上的一组简单的、开放的数据格式。具体表现是把语义嵌入到 HTML 中，以便有助于分离式开发，并通过制定一些简单的约定，来兼顾 HTML 文档的人机可读性，相当于对 Web 网页进行了语义注解。采用微格式的 Web 页面，在 HTML 文档中给一些标签增加一些属性，这些属性对信息的语义结构进行注解，有助于处理 HTML 文档的软件，更好的理解该 HTML 文档。在前端构建中微格式的意义微格式按照某种已有的被广泛应用的标准，通过对内容块的语义标记，可以让外部应用程序、聚合程序和搜索引擎能够做以下事情： 在爬取 Web 内容时，能够更为准确地识别内容块的语义； 对内容进行操作，包括提供访问、校对，还可以将其转化成其他的相关格式，提供给外部程序和Web服务使用。 总结： 微格式可以对网站进行 SEO 优化，如果需要可以考虑。 22. html 常见兼容性问题？ 参考答案： PNG24 位的图片在 IE6 浏览器上出现背景 解决方案：做成 PNG8，也可以引用一段脚本处理。 浏览器默认的 margin 和 padding 不同 解决方案：使用 CSS 重置文件。 IE6 双边距 bug 在 IE6 下，如果对元素设置了浮动，同时又设置了 margin-left 或 margin-right，margin 值会加倍。 12345#box&#123; float:left; width:10px; margin:10px;&#125; 这种情况之下 IE 会产生 20px 的距离 解决方案：在 float 的标签样式控制中加入 1_display:inline; 将其转化为行内属性。( _ 这个符号只有 IE6 会识别） 渐进识别的方式，从总体中逐渐排除局部。 首先，巧妙的使用 “\\9” 这一标记，将 IE 游览器从所有情况中分离出来。 接着，再次使用 “+” 将 IE8 和 IE7、IE6 分离开来，这样 IE8 已经独立识别。 123456.bb&#123; background-color:#f1ee18; /*所有识别*/ .background-color:#00deff\\9; /*IE6、7、8 识别*/ +background-color:#a200ff; /*IE6、7 识别*/ _background-color:#1e0bd1; /*IE6 识别*/&#125; IE 下，获取自定义属性用获取常规 IE 下，可以使属性的方法来获取自定义属性用获取常规，也可以使用 getAttribute( ) 方法获取自定义属性，Firefox 下，只能使用 getAttribute( ) 方法获取自定义属性 解决方法：统一通过 getAttribute( ) 方法获取自定义属性 event 对象的区别 IE 下，event 对象有 x、y 属性，但是没有 pageX、pageY 属性，Firefox 下，event 对象有 pageX、pageY 属性，但是没有 x、y 属性。 解决方法：（条件注释）缺点是在 IE 浏览器下可能会增加额外的 HTTP 请求数。 Chrome 12px 像素 Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示 解决方法：可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。 hover 和 active 失效 超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不在具有 hover 和 active 了 解决方法：改变 CSS 属性的排列顺序 L-V-H-A 1234a:link &#123;&#125;a:visited &#123;&#125;a:hover &#123;&#125;a:active &#123;&#125; 怪异模式问题 漏写 DTD 声明，Firefox 仍然会按照标准模式来解析网页，但在 IE 中会触发怪异模式。 为避免怪异模式给我们带来不必要的麻烦，最好养成书写 DTD 声明的好习惯。 现在可以使用 HTML5, 推荐的写法： 上下 margin 重合问题 IE 和 FireFox 都存在，相邻的两个 div 的 margin-left 和 margin-right 不会重合， 但是 margin-top 和 margin-bottom 却会发生重合。 解决方法：养成良好的代码编写习惯，同时采用 margin-top 或者同时采用 margin-bottom。 IE6 对 png 图片格式支持不好 解决方案：引用一段脚本处理 23. HTML5 有哪些新特性、移除了那些元素？ 参考答案： HTML5 现在已经不是 SGML 的⼦集，主要是关于图像，位置，存储，多任务等功能的增加 绘画 canvas ⽤于媒介回放的 video 和 audio 元素 本地离线存储 localStorage ⻓期存储数据，浏览器关闭后数据不丢失 sessionStorage 的数据在浏览器关闭后⾃动删除 语意化更好的内容元素，⽐如 article 、 footer 、 header 、 nav 、 section 表单控件， calendar 、 date 、 time 、 email 、 url 、 search 新的技术 webworker 、 websocket 、 Geolocation 移除的元素： 纯表现的元素： basefont 、 big 、 center 、 font 、 s 、 strike 、 tt 、 u 对可⽤性产⽣负⾯影响的元素： frame 、 frameset 、 noframes ⽀持 HTML5 新标签： IE8&#x2F;IE7&#x2F;IE6 ⽀持通过 document.createElement ⽅法产⽣的标签 可以利⽤这⼀特性让这些浏览器⽀持 HTML5 新标签 浏览器⽀持新标签后，还需要添加标签默认的样式 当然也可以直接使⽤成熟的框架、⽐如 html5shim 24. HTML 全局属性(global attribute)有哪些 参考答案：所谓全局属性，就是指每个 HTML 元素都拥有的属性，大致有如下的属性： class :为元素设置类标识 data-* : 为元素增加⾃定义属性 draggable : 设置元素是否可拖拽 id : 元素 id ，⽂档内唯⼀ lang : 元素内容的的语⾔ style : ⾏内 css 样式 title : 元素相关的建议信息 25. HTML5 为什么只需要写 ？ 参考答案：为什么 HTML5 的顶部只需要一段 1&lt;!DOCTYPE html&gt; HTML4 却需要很长的一段 1&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; 其主要原因，是因为 HTML5 不基于 SGML，所以不需要引用 DTD。 在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。 DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。 26. 对 web 标准、可用性、可访问性的理解 参考答案： 可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力。 可访问性（Accessibility）：Web 内容对于残障用户的可阅读和可理解性 可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。 27. HTML5 引入什么新的表单属性？ 参考答案：form** 新属性**： autocomplete：属性规定表单是否应该启用自动完成功能。autocomplete 属性适用于 ，以及下面的 类型： text, search, url, telephone, email, password, date，pickers, range 以及 color。语法是 novalidate：如果使用该属性，则提交表单时不进行内容的验证。novalidate 属性适用于：，以及以下类型的 标签：text, search, url, telephone, email, password, date pickers, range 以及 color。语法：novalidate&#x3D;”novalidate” input** 新属性**： autocomplete：同上 autofocus：规定输入字段在页面加载时是否获得焦点，加载完成后，光标马上定位在该 input form：form 属性的值必须是其所属表单的 id。如需引用一个以上的表单，请使用空格分隔的列表。 formaction：属性覆盖 form 元素的 action 属性，比如两个提交按钮的时候，一个是正常提交，一个是管理员提交。该属性适用于 type&#x3D;”submit” 以及 *type&#x3D;”image”*。语法是 formaction&#x3D;”#” formenctype：formenctype 属性覆盖 form 元素的 enctype 属性。该属性与 type&#x3D;”submit” 和 type&#x3D;”image” 配合使用。属性规定在发送到服务器之前应该如何对表单数据进行编码。 formmethod：覆盖表单的 method 属性。适用于 type&#x3D;“submit” 和 type&#x3D;“image” formnovalidate：formnovalidate 属性覆盖 form 元素的 novalidate 属性。如果使用该属性，则提交表单时按钮不会执行验证过程。 formtarget：覆盖表单的 target 属性。适用于 type&#x3D;”submit” 和 *type&#x3D;”image”*， 该属性规定在何处打开 action URL。 height 和 width：height 和 width 属性规定用于 image 类型的 标签的图像高度和宽度。 list：引用包含输入字段的预定义选项的 datalist 。 min 和 max：min 属性与 max 属性配合使用，可创建合法值范围，两个要一对用。语法是选择 0-10 数字，例如： multiple：如果使用该属性，则允许一个以上的值，比如上传文件的时候，设置这个属性后可以一次选择几个图片；multiple 属性适用于以下类型的 &lt;input&gt;标签：email 和 file。 pattern (regexp)：描述了一个正则表达式用于验证 元素的值，pattern 属性适用于以下 类型：text, search, url, telephone, email 以及 password。 placeholder：提供可描述输入字段预期值的提示信息 (hint)。该提示会在输入字段为空时显示，并会在字段获得焦点时消失。 required：规定必需在提交之前填写输入字段。 如果使用该属性，则字段是必填（或必选）的。 step：为输入域规定合法的数字间隔。 如果 step&#x3D;”3”，则合法的数是 -3、0、3、6 等。step 属性可以与 max 和 min 属性创建一个区域值。 28. iframe 的作用 参考答案：参考答案：iframe 也称作嵌入式框架，嵌入式框架和框架网页类似，它可以把一个网页的框架和内容嵌入在现有的网页中。优点 重载页面时不需要重载整个页面，只需要重载页面中的一个框架页(减少了数据的传输，增加了网页下载速度) 方便制作导航栏 缺点 会产生很多页面，不容易管理 浏览器的后退按钮无效 无法被一些搜索引擎索引到 多数小型的移动设备（PDA 手机）无法完全显示框架 由于上面诸多缺点，因此不符合标准网页设计的理念，已经被标准网页设计抛弃 目前框架的所有优点完全可以使用 Ajax 实现，因此已经没有必要使用 iframe 框架了。 29. img 上 title 与 alt 参考答案： alt：如果无法显示图像，浏览器将显示 alt 指定的内容 title：在鼠标移到元素上时显示 title 的内容 两者之间的区别： 通常当⿏标滑动到元素上的时候显示 title。 alt 是 的特有属性，是图⽚内容的等价描述，⽤于图⽚⽆法加载时显示、读屏器 阅读图⽚。可提图⽚⾼可访问性，除了纯装饰图⽚外都必须设置有意义的值，搜索引擎会重点分析。 30. HTML5 新增哪些新特性 ？ 参考答案：HTML5 新增特性有： 拖拽释放 语义化更好的内容标签 视频、音频 画布 地理 本地离线存储 表单控件 31. 行内元素和块级元素区别，有哪些，怎样转换？（顶呱呱） 参考答案：块级元素： 总是在新行上开始； 高度，行高以及外边距和内边距都可控制； 宽度缺省是它的容器的 *100%*，除非设定一个宽度。 它可以容纳内联元素和其他块元素 行内元素： 和其他元素都在一行上； 高，行高及外边距和内边距不可改变； 宽度就是它的文字或图片的宽度，不可改变 内联元素只能容纳文本或者其他内联元素 对行内元素，需要注意如下： 设置宽度 width 无效。 设置高度 height 无效，可以通过 line-height 来设置。 设置 margin 只有左右 margin 有效，上下无效。 设置 padding 只有左右 padding 有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。 通过 display 属性对行内元素和块级元素进行切换(主要看第 2、3、4 个值)： html 中常见的块级元素：p、div、form、ul、ol、table html 中常见的行内元素：a、img、span、button 32. HTML5 与 HTML4 的区别（华安永康） 参考答案：1、语法简化HTML、XHTML 的 DOCTYPE、html、meta、script 等标签，在 HTML5 中有大幅度的简化。2、统一网页内嵌多媒体语法以前，在网页中播放多媒体时，需要使用插件的方式来完成。有了 HTML5 之后，使用&lt;video&gt;或&lt;audio&gt;标签播放视频和音频，不需要在安装其他的什么来播放了。3、新增了语义标签为了增加网页的可读性，HTML5 增加了 、、、、、、、 语义标签。4、HTML5 废除了一些旧标签废除的大部分是网页美化方面的标签，例如：、、、、、、。对 框架，不能使用。5、全新的表单设计表单是网页设计者最常用的功能，HTML5 对表单做了很大的更改，不但新增了几项新的标签，对原来的 标签也增加了许多属性。6、新增了 标签，可以绘制图形HTML5 新增了具有绘图功能的 7、新增许多新的 API例如：querySelector、querySelectorAll、拖拽相关 Api 33. 如何处理 HTML5 新标签兼容问题 参考答案：主要有两种方式：方法 1：实现标签被识别通过 document.createElement(tagName) 方法即可让浏览器识别新标签，浏览器支持新标签后，还可以为新标签添加 CSS 样式。方法 2：JavaScript 解决方案使用 html5shim 框架，在&lt;head&gt;中调用以下代码： 123&lt;!--[if lt IE 9]&gt; &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;&lt;![endif]--&gt; 当然也可以直接把这个文件下载到自己的网站上，但这个文件必须在 head 标签中调用。 34. h5 和 html5 区别 参考答案：H5 是一个产品名词，包含了最新的 HTML5、CSS3、ES6 等新的技术来制作的应用。HTML5 是一个技术名词，指代的就仅仅是第五代 HTML。 35. form 表单上传文件时需要进行什么样的声明 参考答案：需要添加如下的声明： 1enctype=&quot;multipart/form-data&quot; 36. 哪个属性可以做到当鼠标悬停在图片上时显示出文字 参考答案：title 属性。当我们为图片设置了 title 属性后，鼠标悬停在图片上面，就会显示出 title 属性所设置的值。 37. 如何在一张图片上的某一个区域做到点击事件 参考答案：可以使用图片热区技术。步骤如下：1、插入图片，并设置好图像的有关参数，且在 标记中设置参数 usemap&#x3D;”#Map”，以表示对图像地图（Map）的引用；2、用 标记设定图像地图的作用区域，并取名为：Map；3、分别用 标记针对相应位置划分出多个矩形作用区域，并设定好其链接参数 href。示例代码如下： 12345678&lt;body&gt; &lt;img src=&quot;url/to/your/image.jpg&quot; alt=&quot;&quot; usemap=&quot;#Map&quot; /&gt; &lt;map name=&quot;Map&quot; id=&quot;Map&quot;&gt; &lt;area alt=&quot;&quot; title=&quot;&quot; href=&quot;#&quot; shape=&quot;poly&quot; coords=&quot;65,71,98,58,114,90,108,112,79,130,56,116,38,100,41,76,52,53,83,34,110,33,139,46,141,75,145,101,127,115,113,133,85,132,82,131,159,117&quot; /&gt; &lt;area alt=&quot;&quot; title=&quot;&quot; href=&quot;#&quot; shape=&quot;poly&quot; coords=&quot;28,22,57,20,36,39,27,61&quot; /&gt; &lt;/map&gt;&lt;/body&gt; 38. 行内元素有哪些？块级元素有哪些？空（void）元素有哪些？ 参考答案： 行内元素：最大的特点就是共享一行，常见的有 span a em i b strong abbr input select 等 块级元素：最大的特点就是独占一行，常见的有 header footer nav section article aside div p ul li ol dl table 等 空元素：就是没有内容的 HTML 元素，比较常见的空元素有 img、link、meta、br、hr 39. 什么是锚点？ 参考答案：锚点（anchor）是一种特殊连接，能定位到 HTML 文档中某个特定位置，通过 HTML 元素的 id 来设置锚点。 40. 图片与 span 元素混排图像下方会出现几像素的空隙的原因是什么？ 参考答案：img 作为可替换元素，它没有自己的基线，如果与不可替换元素混合排列，其行盒底端与基线对齐。由于与基线对齐，图像下方就会出现几像素的空隙。 41. a 元素除了用于导航外，还可以有什么作用？ 参考答案：href 属性中的 url 可以是浏览器支持的任何协议，所以 a 可以用于手机拨号 10086、发送短信 等。当然，a 元素最常见的两个应用就是做锚点和下载文件。锚点可以在点击时快速定位到一个页面的某一个位置，而下载的原理在于 a 标签所对应的资源浏览器无法解析，于是浏览器会选择将其下载下来。","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"iframe 介绍","slug":"HTML/iframe","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T05:56:15.549Z","comments":true,"path":"2023/12/25/HTML/iframe/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/iframe/","excerpt":"","text":"经典真题 iframe 框架有哪些优缺点？ iframe 用来干什么的 iframe 介绍iframe 称之为嵌入式框架，嵌入式框架可以把一个完整的网页内容嵌入到现有的网页中。 下面是一个 iframe 的简单示例： 1234&lt;body&gt; &lt;p&gt;iframe 示例&lt;/p&gt; &lt;iframe src=&quot;https://juejin.cn/&quot;&gt;&lt;/iframe&gt;&lt;/body&gt; 效果： 可以看到，在当前的网页，又嵌入了一个其他页面。 那么这在实际开发中有啥意义呢？ 实际上，在早期的时候， iframe 在开发中用得很多。使用 iframe 可以很方便的制作一个页面的公共部分，例如导航栏。 现在仍然能够找到使用 iframe 的网站（大多是旧的项目） 例如 W3C school： 再比如邮箱： 但是随着 Ajax 的出现，iframe 用得越来越少了。现在在某些特定的场景还能见到，比如模拟窗口，邮箱或者 HTML 在线编辑器等。 究其原因，是因为 iframe 有种种不便，比如一个直观的问题就是 iframe 的自适应高度，这是处理起来比较麻烦的问题，随便百度下都是一大串的代码。 另外还有个重大的缺点，那就是搜索引擎的“爬虫”程序无法解读这种页面，当“爬虫”遇到多个页面嵌套的网页时只看到框架却找不到链接，然后认定此网站是死站点并离开。这对于 SEO 来讲无疑是毁灭性的打击。并且使用大量的 iframe 标签也会稀释你该页面的关键词密度并对其产生影响。 真题解答 iframe 用来干什么的？有哪些优缺点？ 参考答案： iframe 也称作嵌入式框架，嵌入式框架和框架网页类似，它可以把一个网页的框架和内容嵌入在现有的网页中。 优点 重载页面时不需要重载整个页面，只需要重载页面中的一个框架页(减少了数据的传输，增加了网页下载速度) 方便制作导航栏 缺点 会产生很多页面，不容易管理 调用外部页面，需要额外调用 CSS，给页面带来额外的请求次数 会阻塞页面的加载，window 的 onload 事件需要在所有 iframe 加载完毕后(包含里面的元素)才会触发 浏览器的后退按钮无效 无法被一些搜索引擎索引到 多数小型的移动设备（PDA 手机）无法完全显示框架 由于上面诸多缺点，因此不符合标准网页设计的理念，已经被标准网页设计抛弃，目前框架的所有优点完全可以使用 Ajax 实现，因此已经没有必要使用 iframe 框架了。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"文档声明","slug":"HTML/document-declaration","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T03:31:59.436Z","comments":true,"path":"2023/12/25/HTML/document-declaration/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/document-declaration/","excerpt":"","text":"经典真题 什么是&lt;!DOCTYPE&gt;？是否需要在 HTML5 中使用？ 什么是严格模式与混杂模式？ 列举几条怪异模式中的怪癖行为 文档声明概念HTML 文档通常以文档声明开始，该声明的作用是帮助浏览器确定其尝试解析和显示的 HTML 文档类型。 1&lt;!DOCTYPE html&gt; 文档声明必须是 HTML 文档的第一行、且顶格显示，对大小写不敏感。因为任何放在 DOCTYPE 前面的东西，比如批注或 XML 声明，会令 IE9 或更早期的浏览器触发怪异模式（后面的渲染模式会介绍） 文档声明并非一个 HTML 标签。它是一条“信息”，告知浏览器期望的文档类型。 那么说到文档类型，我们首先有必要先了解一下 HTML 的发展历史。如下图所示： html5初稿是在2008年诞生的，12年形成稳定的形式 14年迅速发展 可以看到，HTML 版本从最开始诞生到最新的 HTML5，中间经历了很多版本。 那不同的版本有啥区别么？当然有区别，比如一个最显著的区别就是支持的 HTML 元素不同。例如： 更多各版本所支持的不同 HTML 元素可以参阅：https://www.w3school.com.cn/tags/html_ref_dtd.asp 所以，你现在就知道为什么要书写文档声明了。原因是不同版本所支持的 HTML 元素类型是不同的，我需要告诉浏览器以哪一种文档类型方式来解析当前的这个 HTML 文件。 那么，最新的 HTML5 的文档类型倒是很简单，前面我们已经看到了 1&lt;!DOCTYPE html&gt; 那么稍微老一点的版本，例如 HTML4 或 XHTML 的文档类型声明长啥样呢？ 这里我们来看两个。 HTML 4.01 Strict 该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。 1&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt; HTML 4.01 Transitional 该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。 12&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; 更多不同文档类型的声明写法可以参阅：https://www.w3school.com.cn/tags/tag_doctype.asp 首先，给我们的第一直观感受，就是声明写得很长。 那么为什么会这么长呢？ 原因很简单，HTML5 不需要引入 DTD 文件，而其他类型的文档声明是需要引入 DTD 的。 很好，一个新的名词出现了，DTD。 在早期的 HTML 版本，例如 HTML 4.01 中，*&lt;!DOCTYPE&gt;* 声明之所以要引用 DTD，是因为 HTML 4.01 基于 SGML。而 DTD 规定的是标记语言的规则，这样浏览器才能正确地呈现内容。 但是最新的 HTML5 不基于 SGML，所以不需要引用 DTD。 到这里估计有的小伙伴要懵圈了，怎么又冒出来一个 SGML ？？ 是的，你没有看错，我们有：SGML、HTML、XML、XHTML、HTML5 从这五者的名字中，我们都可以看到 “ML” 这两个字母，所以我们先从 “ML” 说起。 “ML”即 “Markup language(置标语言)”。 根据维基百科对其的解释，“Markup language” 是用标准的标记来解释纯文本文档的内容，从而提供关于文档结构或文档该如何渲染的信息。置标语言的发展可以用下图来表示： GML 是第一代置标语言，使文档能明确将标示和内容分开，所有文件使用同样的标示方法。 SGML 在 GML 的基础上进行整理，形成了一套非常严谨的文件描述方法。它的组成包括语法定义，DTD，文件实例三部分。SGML 因太严谨规范达 500 多页，故而不易学、不易用、难以实现，所以在它的基础上又发展出了其他的更易用的置标语言。 HTML 抛弃了SGML 复杂庞大的缺点，继承了 SGML 的很多优点。HTML 最大的特点是简单性和跨平台性。它只使用了 SGML 中很少的一部分标记，例如 HTML 4.0 中只定义了 70 余种标记。为了便于在计算机上实现，HTML 规定的标记是固定的，即 HTML 语法是不可扩展的。 随着 Web 应用的不断发展，HTML 的局限性也越来越明显地显现了出来，如 HTML 无法描述数据、可读性差、搜索时间长等。人们又把目光转向 SGML，再次改造 SGML 使之适应现在的网络需求。1998 年 2 月 10 日，W3C(World Wide Web Consortium，万维网联盟)公布 XML 1.0 标准，XML 诞生了。很长一段时间，XML 都作为网络传输的标准数据格式。 XHTML 的出现是因为当时的 HTML 语法要求比较松散，这样对网页编写者来说，比较方便，但对于机器来说，语言的语法越松散，处理起来就越困难，对于传统的计算机来说，还有能力兼容松散语法，但对于许多其他设备，比如手机，难度就比较大。因此产生了由 DTD 定义规则，语法要求更加严格的 XHTML。 DTD 教程可以参阅：https://www.w3school.com.cn/dtd/index.asp 最终，HTML5 是 HTML 的第五个修订版，该版本不在基于 SGML 了，所以也就不用再引入 DTD 声明了。 HTML5 的出现，其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。 现在国内通常所说的 H5 开发，实际上是 HTML5 与 CSS3 及 ES6 的一个组合，大概可以用以下公式说明：HTML5 ≈ HTML + CSS3 + ES6 渲染模式明白了文档类型声明的作用之后，接下来我们还需要看一个东西，那就是渲染模式。 浏览器渲染模式分为 3 种： 怪癖模式（混杂模式）[Quirks mode] 严格模式（标准模式） [Standars mode] 几乎标准模式 [Almost standards mode] 之所以出现不同的渲染模式，是由于历史原因造成的。 当年 Netscape4（网景公司早期的浏览器）和 IE4（微软公司早期的浏览器）实现 CSS 机制时，没有遵循 W3C 提出的标准。Netscape4 提供了糟糕的支持，而 IE4 虽然接近标准，但依旧未能完全正确的支持标准。 所以，在 W3C 标准推出以前，浏览器在对页面的渲染上没有统一规范，产生了差异（Quirks mode 或者称为 Compatibility Mode） 为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用 CSS，因此大部分网站的 CSS 实现并不符合 W3C 规范的标准。 W3C 标准推出后，浏览器渲染页面有了统一的标准（Strict mode 也有叫做 Standars mode）浏览器都开始采纳新标准，但存在一个问题就是如何保证旧的网页还能继续浏览，在标准出来以前，很多页面都是根据旧的渲染方法编写的，如果用的标准来渲染，将导致页面显示异常。 为保持浏览器渲染的兼容性，使以前的页面能够正常浏览，浏览器都保留了旧的渲染方法（如：微软的 IE）。这样浏览器渲染上就产生了 Quircks mode 和 Standars mode，两种渲染方法共存在一个浏览器上。混杂模式服务于旧式规则，而严格模式服务于标准规则。 对于 HTML 文档来说，浏览器使用文档开头的 DOCTYPE 来决定用怪异模式处理或标准模式处理。 如果文档中没有 DOCTYPE 将触发文档的怪异模式。怪异模式最明显的影响是会触发怪异盒模型。 在 DOCTYPE 声明中，没有使用 DTD 声明或者使用 HTML4 以下的 DTD 声明时，基本所有的浏览器都是使用 Quirks mode 呈现，其他的则使用 Standars mode 解析。 严格模式和怪异模式的部分渲染区别 盒模型的高宽包含内边距 padding 和边框 border 在 W3C 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在 IE5.5 及以下的浏览器及其他版本的 Quirks 模式下，IE 的宽度和高度还包含了 padding 和 border。 可以设置行内元素的高宽 在 standards 模式下，给 span 等行内元素设置 wdith 和 height 都不会生效，而在 Quirks 模式下，则会生效。 可设置百分比的高度 在 standards 模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。 用 margin:0 auto 设置水平居中在 IE 下会失效 使用 margin:0 auto 在 standards 模式下可以使元素水平居中，但在 Quirks 模式下却会失效，Quirks 模式下的解决办法，用 text-align 属性：body{text-align:center};#content{text-align:left} Quirks 模式下设置图片的 padding 会失效 Quirks 模式下 Table 中的字体属性不能继承上层的设置 Quirks 模式下 white-space:pre 会失效 更多可以参阅 MDN 上对怪异模式和标准模式的解释：https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode MDN 上还给出了不同模式在不同浏览器下的渲染区别（英文）：https://hsivonen.fi/doctype/ 真题解答 什么是&lt;!DOCTYPE&gt;？是否需要在 HTML5 中使用？ &#96;这种书写是告诉浏览器，整个文档使用 HTML5 的标准进行解析。 什么是严格模式与混杂模式？ 严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。**混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。**如何区分：浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关。**1. 如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式）2. 包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）3. DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD 不存在或者格式不正确——混杂模式）4. HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分） 意义：严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。 列举几条怪异模式中的怪癖行为 宽高的算法与 W3C 盒模型不同 在表格中的字体样式不会继承 怪异模式下可以设置行内元素宽高 怪异模式下 white-space:pre 会失效 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"语义化","slug":"HTML/semanticization","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T03:35:21.943Z","comments":true,"path":"2023/12/25/HTML/semanticization/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/semanticization/","excerpt":"","text":"经典真题 说说对 html 语义化的理解 什么是语义元素？语义是指对一个词或者句子含义的正确解释。很多 HTML 标签也具有语义的意义，也就是说元素本身传达了关于标签所包含内容类型的一些信息。例如，当浏览器解析到&lt;h1&gt;&lt;/h1&gt;标签时，它将该标签解释为包含这一块内容的最重要的标题。h1 标签的语义就是用它来标识特定网页或部分最重要的标题。 为什么要语义化？ 代码结构：使页面没有css的情况下，也能够呈现出很好的内容结构 有利于 SEO： 爬虫依赖标签来确定关键字的权重，因此可以和搜索引擎建立良好的沟通，帮助爬虫抓取更多的有效信息 提升用户体验：例如 title、alt 可以用于解释名称或者解释图片信息，以及 label 标签的灵活运用。 便于团队开发和维护：语义化使得代码更具有可读性，让其他开发人员更加理解你的 html 结构，减少差异化。 方便其他设备解析：如屏幕阅读器、盲人阅读器、移动设备等，以有意义的方式来渲染网页。 HTML5 常用的语义元素HTML5 提供了新的语义元素来定义网页的不同部分，它们被称为“切片元素”，如图所示 ： header：用于定义页面的头部区域，通常包括网站 logo、主导航、全站链接以及搜索框。 nav：定义页面的导航链接部分区域。 main：定义文档的主要内容，该内容在文档中应当是独一无二的 article：定义页面独立的内容，它可以有自己的 header、footer、sections 等，专注于单个主题的博客文章，报纸文章或网页文章。 section：表示文档中的一个区域（或节），比如，内容中的一个专题组。 aside：表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分且可以被单独的拆分出来而不会影响整体。通常表现为侧边栏或嵌入内容。 footer：定义最近一个章节内容或者根节点元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。 大约有 100 多个 HTML 语义元素可供选择，以下是常用的语义元素： 更多的语义化标签可以参阅：https://developer.mozilla.org/en-US/docs/Web/HTML/Element 无障碍网页W3C 在 1997 年发起了一项 WAI（Web Accessibility Initiative）的计划，该计划的目标是提升网站的易用性(accessibility)，而其中有一个很重要的指标，那就是能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。 HTML5 在无障碍方面进行了加强，加入了无障碍属性。 所谓 HTML5 无障碍属性，主要针对的是视觉缺陷，失聪，行动不便的残疾人以及假装残疾的测试人员。尤其像盲人，眼睛看不到，其浏览网页则需要借助辅助设备，如屏幕阅读器，屏幕阅读机可以大声朗读或者输出盲文。 而 HTML5 无障碍属性就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！ 关于无障碍的更多说明，可以参阅 MDN：https://developer.mozilla.org/zh-CN/docs/Web/Accessibility 常见的无障碍属性 WAI-ARIA 是 W3C 编写的规范，定义了一组可用于其他元素的 HTML 特性，用于提供额外的语义化以及改善缺乏的可访问性。以下是规范中三个主要的特性： 角色：这定义了元素是干什么的。许多「标志性的角色」，其实重复了 HTML5 的结构元素的语义价值。例如 role&#x3D;”navigation” (nav) 或者 role&#x3D;”complementary” (aside)。 属性：我们能通过定义一些属性给元素，让他们具备更多的语义。例如：aria-required&#x3D;”true” 意味着元素在表单上是必填的。然而 aria-labelledby&#x3D;”label” 允许在元素上设置一个 ID，用于 labelledby 引用作为屏幕阅读器指定的 label 内容 ，多个也可以。 状态：用于表达元素当前的条件的特殊属性，例如 *aria-disabled&#x3D;”true”*，屏幕阅读器就会这个表单禁止输入。状态和属性的差异之处就是：属性在应用的生命周期中不会改变，而状态可以，通常我们用编程的方法改变它，例如 Javascript。 关于 WAI-ARIA 属性重要的一点是它不会对 Web 页面有任何影响，除了让更多的信息从浏览器暴露给 accessibility APIs (无障碍 API)，这也是屏幕阅读器这一类软件的信息源。WAI-ARIA 不会影响网页的结构，以及 DOM 等等，尽管这些属性可用于作为 CSS 选择器。 更多无障碍属性可以参阅：https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics 真题解答 说说对 html 语义化的理解 语义化的目的主要有以下几点： 去掉或者丢失样式的时候能够让页面呈现出清晰的结构 有利于 SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页 便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化。HTML5 中新增加的很多标签，例如：article、nav、header 和 footer 等，就是基于语义化设计原则 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"替换元素","slug":"HTML/替换元素","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T05:58:15.124Z","comments":true,"path":"2023/12/25/HTML/替换元素/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0/","excerpt":"","text":"经典真题 什么是可替换元素，什么是非可替换元素，它们各自有什么特点？ 什么是替换元素所谓可替换元素（replaced element），是指一些展现效果不由 CSS 来控制的元素。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。 简单来说，它们的内容不受当前文档的样式的影响。CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。某些可替换元素，例如 &lt;iframe&gt; 元素，可能具有自己的样式表，但它们不会继承父文档的样式。 与替换元素相对应的，就是非替换元素，顾名思义就是那些样式完全由 CSS 来控制的元素，例如 p，h1～h6 等。 更多可替换元素内容可以参阅 MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element 常见的替换元素 图片标签 img 内联框架 iframe 音频视频标签 真题解答 什么是可替换元素，什么是非可替换元素，它们各自有什么特点？ 可替换元素是指这样一种元素，它在页面中的大部分展现效果不由 CSS 决定。 比如 img 元素就是一个可替换元素，它在页面中显示出的效果主要取决于你连接的是什么图片，图片是什么它就展示什么，CSS 虽然可以控制图片的尺寸位置，但永远无法控制图片本身。 再比如，select 元素也是一个典型的可替换元素，它在页面上呈现的是用户操作系统上的下拉列表样式，因此，它的展现效果是由操作系统决定的。所以，同一个 select 元素，放到不同操作系统的电脑上会呈现不同的外观。 img、video、audio、大部分表单元素都属于可替换元素。 非可替换元素就是指的普通元素，它具体在页面上呈现什么，完全由 CSS 来决定。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"微格式","slug":"HTML/微格式","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T05:57:21.891Z","comments":true,"path":"2023/12/25/HTML/微格式/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/%E5%BE%AE%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"经典真题 知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？ 微格式介绍所谓微格式，是建立在已有的、被广泛采用的标准基础之上的一组简单的、开放的数据格式。 具体表现是把语义嵌入到 HTML 中，以便有助于分离式开发，并通过制定一些简单的约定，来兼顾 HTML 文档的人机可读性，相当于对 Web 网页进行了语义注解。 talk is cheap，show me code 以前我们是这样写一个链接到首页的代码的： 1&lt;a href=”http://www.bbon.cn”&gt;Web Design Blog&lt;/a&gt; 而现在我们要为这个代码元素 a 加上 rel 属性： 1&lt;a href=”http://www.bbon.cn“ rel=”homepage”&gt;Web Design Blog&lt;/a&gt; 通过上面的代码，我们可以发现，多了一个 rel 属性。这个 rel&#x3D;”home” 属性显示链接的目标页面是该网站的首页。 通过为已有的链接元素添加语义化属性，就为这个链接添加了具体的结构和意义。 就这？ No、No、No，我们再去微格式的官网瞅一瞅：https://microformats.org/ 官网对微格式是这么介绍的： Microformats are based on simple markup conventions that enable you to add meaningful structure to your web content. 微格式基于简单的标记约定，使您能够向web内容添加有意义的结构。 One of the key principles of microformats, is to privilege human readable content. This means that you should think first and foremost of your content design being readable and accessible to web viewers. 微格式的一个关键原则是赋予人类可读内容特权。这意味着您应该首先考虑内容设计的可读性和可访问性。 Using the most appropriate HTML elements and applying structured class names to your markup enables you to produce content that can be clearly understood by a human audience and also used in a structured way by automated programs and other online tools. 通过使用最合适的HTML元素并将结构化类名应用到标记中，您可以生成人类观众可以清楚理解的内容，并通过自动化程序和其他在线工具以结构化方式使用这些内容。 But the point is that you shouldn’t have to go out of your way to produce such machine friendly markup - microformats make it easy to integrate this greater degree of structure into your websites, without the overhead of having to learn complicated new languages or formats. 但关键是，你不应该不遗余力地制作这样的机器友好型标记——微格式可以轻松地将这种更高程度的结构集成到你的网站中，而无需学习复杂的新语言或格式。 正如前面所介绍的，微格式就是为了兼顾 HTML 文档的人机可读性，在标签中添加的语义注解。 那好，那么我们以后书写所有的 HTML 代码，都要这样书写注解么？ 并不是，否则人都傻了。微格式一般用于标记人员、组织、事件、地点、博客帖子、产品、评论、简历、食谱等的 HTML。 例如： Mark-up your contact info with h-card, link to other profiles with rel&#x3D;”me” 使用 h-card 标记您的联系信息，使用 rel&#x3D;“me” 链接到其他个人资料 Mark-up your blog with h-entry. 用 h-entry 标记你的博客。 这里我们以 h-card 为例。 h-card 是一种微格式，用来发布个人，公司，组织，地点等详细的联系信息。 它可以使分析器（比如其他网站，Firefox 的 Operator 插件）获得详细的信息，并通过别的网站或者地图工具进行显示，或者载入到地址簿等其他程序。 例如，没有加入 h-card 微格式时，我们的 HTML 结构如下： 123456&lt;div&gt; &lt;div&gt;Joe Doe&lt;/div&gt; &lt;div&gt;The Example Company&lt;/div&gt; &lt;div&gt;604-555-1234&lt;/div&gt; &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;&lt;/div&gt; 加入微格式后，成为： 123456&lt;div class=&quot;vcard&quot;&gt; &lt;div class=&quot;fn&quot;&gt;Joe Doe&lt;/div&gt; &lt;div class=&quot;org&quot;&gt;The Example Company&lt;/div&gt; &lt;div class=&quot;tel&quot;&gt;604-555-1234&lt;/div&gt; &lt;a class=&quot;url&quot; href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;&lt;/div&gt; 这里，正式名称（class&#x3D;”fn”），组织（class&#x3D;”org”），电话号码（class&#x3D;”tel”）和 url（class&#x3D;”url”）分别用相应的 class 标示。 同时，所有内容都包含在 class&#x3D;”vcard” 里。 再例如，我们用一个维基媒体基金会的联系方式，来作为 h-card 微格式实例。 加入 h-card 微格式之前的信息内容如下： 1234567Wikimedia Foundation Inc.200 2nd Ave. South #358St. Petersburg, FL 33701-4313USAPhone: +1-727-231-0101Email: info@wikimedia.orgFax: +1-727-258-0207 加入微格式后，成为： 1234567891011121314151617&lt;div class=&quot;vcard&quot;&gt; &lt;div class=&quot;fn org&quot;&gt;Wikimedia Foundation Inc.&lt;/div&gt; &lt;div class=&quot;adr&quot;&gt; &lt;div class=&quot;street-address&quot;&gt;200 2nd Ave. South #358&lt;/div&gt; &lt;div&gt; &lt;span class=&quot;locality&quot;&gt;St. Petersburg&lt;/span&gt;, &lt;span class=&quot;region&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;postal-code&quot;&gt;33701-4313&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;country-name&quot;&gt;USA&lt;/div&gt; &lt;/div&gt; &lt;div&gt;Phone: &lt;span class=&quot;tel&quot;&gt;+1-727-231-0101&lt;/span&gt;&lt;/div&gt; &lt;div&gt;Email: &lt;span class=&quot;email&quot;&gt;info@wikimedia.org&lt;/span&gt;&lt;/div&gt; &lt;div&gt; &lt;span class=&quot;tel&quot;&gt;&lt;span class=&quot;type&quot;&gt;Fax&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;+1-727-258-0207&lt;/span&gt;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 在这个例子中，正式名称（class&#x3D;”fn”）和组织（class&#x3D;”org”）写在了一个属性中，表示这是一个组织，而不是个人。 这个时候，有的小伙伴就要提问了，这些 h-card 里面的属性名是固定的么？ 没错，常用的 h-card 属性还包括：bday（生日）、email（邮箱）、tel（电话）、nickname（昵称）等。 目前已具备完整规范的微格式还包括：hCard、hCalendar、XOXO、XFN、VoteLinks 和 3 个 “rel-” 的微格式：rel- license、rel-nofollow 和 rel-tag。 至于每一种微格式的规范（里面有哪些属性）是什么，我们可以在官网进行查阅。 例如： h-card 的规范就可以参阅：https://microformats.org/wiki/h-card 真题解答 知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？ 参考答案： 所谓微格式，是建立在已有的、被广泛采用的标准基础之上的一组简单的、开放的数据格式。 具体表现是把语义嵌入到 HTML 中，以便有助于分离式开发，并通过制定一些简单的约定，来兼顾 HTML 文档的人机可读性，相当于对 Web 网页进行了语义注解。 采用微格式的 Web 页面，在 HTML 文档中给一些标签增加一些属性，这些属性对信息的语义结构进行注解，有助于处理 HTML 文档的软件，更好的理解该 HTML 文档。 在前端构建中微格式的意义 微格式按照某种已有的被广泛应用的标准，通过对内容块的语义标记，可以让外部应用程序、聚合程序和搜索引擎能够做以下事情： 在爬取 Web 内容时，能够更为准确地识别内容块的语义； 对内容进行操作，包括提供访问、校对，还可以将其转化成其他的相关格式，提供给外部程序和Web服务使用。 总结： 微格式可以对网站进行 SEO 优化，如果需要可以考虑。 -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"},{"title":"页面可见性","slug":"HTML/页面可见性","date":"2023-12-25T04:00:00.000Z","updated":"2024-09-09T05:58:58.981Z","comments":true,"path":"2023/12/25/HTML/页面可见性/","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/2023/12/25/HTML/%E9%A1%B5%E9%9D%A2%E5%8F%AF%E8%A7%81%E6%80%A7/","excerpt":"","text":"经典真题 页面可见性（Page Visibility）API 可以有哪些用途？ 页面可见性介绍长期以来我们一直缺少一个判断用户是否正在浏览某个指定标签页的方法。 用户是否去看别的网站了？他们切换回来了么？ 现在，HTML5 里页面可见性接口就提供给了程序员一个方法，让他们使用 visibilitychange 页面事件来判断当前页面可见性的状态，并针对性的执行某些任务。同时还有新的 document.hidden 属性可以使用。 常用的 API 如下： document.hidden：这个新出现的 document.hidden 属性，它显示页面是否为用户当前观看的页面，值为 ture 或 false。 document.visibilityState：visibilityState 的值要么是 visible ，表明页面为浏览器当前激活 tab，而且窗口不是最小化状态；要么是 hidden ，表示页面不是当前激活 tab 页面，或者窗口最小化了；或者 prerender ，表示页面在重新生成，对用户不可见。 visibilitychange 事件：监听页面可见性变化事件 下面是一个页面可见性的具体示例： 12345678910111213&lt;body&gt; &lt;p&gt;页面可见性示例&lt;/p&gt; &lt;script&gt; document.addEventListener(&quot;visibilitychange&quot;, function () &#123; if(document.visibilityState === &quot;hidden&quot;)&#123; document.title = &quot;小样去哪儿了？快回来&quot; &#125; if(document.visibilityState === &quot;visible&quot;)&#123; document.title = &quot;页面可见性示例&quot; &#125; &#125;); &lt;/script&gt;&lt;/body&gt; 更多有关页面可见性的内容可以参阅 MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/Page_Visibility_API 真题解答 页面可见性（Page Visibility）API 可以有哪些用途？ 所谓页面可见性，就是获取当前页面的可见状态。因为对于用户来讲可以打开好多标签页面来回切换，然而始终只有一个页面处于显示状态。所以我们可以通过页面可见性（Page Visibility）API 来判断当前页面是显示状态还是隐藏状态。 常用的 API 有三个，document.hidden 返回一个布尔值，如果是 true，表示当前页面隐藏，false 则表示页面可见。不同页面之间来回切换，会触发 visibilitychange 事件，还有一个 document.visibilityState，表示页面所处的状态。 常见的用途： 网站有图片轮播效果，只有在用户观看轮播的时候，才会自动展示下一张幻灯片。 显示信息仪表盘的应用程序不希望在页面不可见时轮询服务器进行更新。 页面想要检测是否正在渲染，以便可以准确的计算网页浏览量 当设备进入待机模式时，网站想要关闭设备声音（用户按下电源键关闭屏幕） -EOF-","categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"}],"author":"初白"}],"categories":[{"name":"前端","slug":"前端","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/"},{"name":"HTML","slug":"前端/HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/HTML/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://chubaiwarmlight.github.io/ChuBaiWarmlight/tags/CSS/"}]}